<h3 class="my-4">
  <i class="fa fa-angle-double-right me-2"></i>
  <i class="fa fa-calendar-day me-2"></i>Pengunjung Perhari
</h3>
<div class="p-3 mt-3 ms-5 card shadow rounded-4" style="margin-bottom: 5em; width: 70%; background: white">
  <div id="chartDiv"></div>
</div>
<h3 class="my-4">
  <i class="fa fa-angle-double-right me-2"></i>
  <i class="fa fa-map-location-dot me-2"></i>Pengunjung Berdasarkan
  Daerah Asal
</h3>
<div class="p-3 mt-3 ms-5 card shadow rounded-4" style="margin-bottom: 5em; width: 70%; background: #f3e2cc">
  <canvas id="canvas" style="padding: 0em"></canvas>
</div>
<h3 class="my-4">
  <i class="fa fa-angle-double-right me-2"></i>
  <i class="fa fa-money-bill-trend-up me-2"></i>Penghasilan Perminggu
</h3>
<div class="p-3 mt-3 ms-5 card shadow rounded-4" style="margin-bottom: 5em; width: 70%; background: white">
  <canvas id="canvas1"></canvas>
</div>

<h3 class="my-4">
  <i class="fa fa-angle-double-right me-2"></i>
  <i class="fa fa-ticket me-2" style="transform: rotate(-30deg)"></i>Jumlah
  Tiket Terjual Perminggu
</h3>
<div class="p-3 mt-3 ms-5 card shadow rounded-4"
  style="margin-bottom: 5em; width: 70%; background: rgba(171, 205, 239, 0)">
  <canvas id="canvas2"></canvas>
</div>

<h3 class="my-4">
  <i class="fa fa-angle-double-right me-2"></i>
  <i class="fa fa-umbrella-beach me-2"></i>Tempat Terfavorit (Pengunjung
  Terbanyak)
</h3>
<div class="p-3 mt-3 ms-5 card shadow rounded-4"
  style="margin-bottom: 5em; width: 70%; background: rgba(171, 205, 239, 0)">
  <div id="chartHolder" style="width: 100%; height: 500px"></div>
</div>
<div id="datas" class="d-none"><%= datas  %></div>
<script>
  const datas = document.getElementById('datas').innerText
  const [visitors, favoritePlace, visitorsPerDay, tiketIncome, incomePerWeek, ] = JSON.parse(datas)

  let values = visitors.map(e => [e.provinsi, parseInt(e.pengunjung)])

  const country = fetch('/assets/asia.json').then((r) => r.json());
  const states = fetch('/assets/indonesia.json').then((r) => r.json());


  Promise.all([states, country]).then((data) => {

    const regions = ChartGeo.topojson
      .feature(data[0], data[0].objects.layer).features
    const countries = ChartGeo.topojson.feature(data[1], data[1].objects.continent_Asia_subunits).features;
    const Indonesia = countries.find((d) => d.properties.geounit === 'Indonesia');

    let dataValues = regions.map((d, i) => {
      let data = {}
      for (let i = 0; i < regions.length; i++) {
        data.feature = d
        data.value = 0
        for (let j = 0; j < values.length; j++) {
          if (values[j][0] === d.properties.name) {
            data.feature = d
            data.value = values[j][1]
          }
        }
      }

      return data
    })

    const chart = new Chart(document.getElementById('canvas').getContext('2d'), {
      type: 'choropleth',
      data: {
        labels: regions.map(e => e.properties.name),
        datasets: [{
          label: 'Countries',
          outline: Indonesia,
          data: dataValues,
          borderColor: 'rgba(0,0,0, 0.5)',
        }, ],
      },
      options: {
        responsive: true,
        showOutline: false,
        showGraticule: false,
        scales: {
          x: {
            backgroundColors: '#00FF00',
            interpolate: 'warm',
            color: 'black',
          }
        },
        plugins: {
          legend: {
            display: false,
          },
        },
        scales: {
          xy: {
            projection: 'mercator',
          },
        },
      },
    });
  });
</script>
<script>
  const data = {
    labels: incomePerWeek.map(e => 'Week ' + e.week),
    datasets: [{
      label: false,
      data: incomePerWeek.map(e => parseInt(e.total)),
      borderColor: 'rgba(171, 205, 239, 0.662)',
      backgroundColor: '#068fff',
      pointStyle: 'circle',
      pointRadius: 10,
      pointHoverRadius: 15
    }]
  };
  const config = {
    type: 'line',
    data: data,
    options: {
      responsive: true,
      plugins: {
        legend: {
          display: false
        },
        title: {
          // display: true,
          // text: 'Penghasilan Perminggu',
          font: {
            size: 16,
            weight: 'bold'
          }
        },
      },
      scales: {
        x: {
          title: {
            display: true,
            text: 'Minggu',
            font: {
              size: 14,
              weight: 'bold'
            }
          },
          grid: {
            color: '#d8396e',
            borderColor: 'grey',
            tickColor: 'grey'
          }
        },
        y: {
          title: {
            display: true,
            text: 'Penghasilan (Rp)',
            font: {
              size: 14,
              weight: 'bold'
            }
          }
        }
      }
    }
  };
  const ctx = document.getElementById('canvas1').getContext('2d');
  const myChart = new Chart(ctx, config);

  let tiketData = [...Array(3)].map(e => [])
  tiketIncome.map(e => (
    (e.jenis_tiket_id === 1) ? tiketData[0].push(e.jumlah_tiket_sold) :
    (e.jenis_tiket_id === 2) ? tiketData[1].push(e.jumlah_tiket_sold) :
    (e.jenis_tiket_id === 3) ? tiketData[2].push(e.jumlah_tiket_sold) : null
  ))
  // console.log(tiketData);

  const data2 = {
    labels: [...new Set(tiketIncome.map(e => 'Week ' + e.week))],
    datasets: [{
        label: false,
        data: tiketData[0],
        label: 'Anak-anak',
        backgroundColor: 'rgba(224, 235, 9, 0.6)',
      },
      {
        label: false,
        data: tiketData[1],
        label: 'Dewasa',
        backgroundColor: 'rgba(6, 143, 255, 0.6)',
      },
      {
        label: false,
        data: tiketData[2],
        label: 'Eksklusif',
        backgroundColor: 'rgba(181, 11, 248, 0.6)',
      },
    ]
  };
  const config2 = {
    type: 'bar',
    data: data2,
    options: {
      responsive: true,
      plugins: {
        legend: {
          title: {
            display: true,
            text: 'Jenis Tiket',
            font: {
              size: 14,
              weight: 'bold'
            }
          }
        },
        title: {
          // display: true,
          // text: 'Penghasilan Perminggu',
          font: {
            size: 16,
            weight: 'bold'
          }
        },
      },
      scales: {
        x: {
          title: {
            display: true,
            text: 'Minggu',
            font: {
              size: 14,
              weight: 'bold'
            }
          },
          grid: {
            color: '#d8396e',
            borderColor: 'grey',
            tickColor: 'grey'
          }
        },
        y: {
          title: {
            display: true,
            text: 'Tiket Terjual (pcs)',
            font: {
              size: 14,
              weight: 'bold'
            }
          }
        }
      }
    }
  };

  const ctx2 = document.getElementById('canvas2').getContext('2d');
  const myChart2 = new Chart(ctx2, config2);
</script>
<script>
  var chartVars = "KoolOnLoadCallFunction=chartReadyHandler";

  KoolChart.create("chart1", "chartHolder", chartVars, "100%", "100%");

  function chartReadyHandler(id) {
    document.getElementById(id).setLayout(layoutStr);
    document.getElementById(id).setData(finalData);
  }

  var layoutStr =
    `<KoolChart backgroundColor="#FFFFFF"  borderThickness="1" borderStyle="none">
  	<Options>
  		<Legend />
  	</Options>
  	<NumberFormatter id="numFmt" precision="0"/>
  	<Bump2DChart showDataTips="true" dataTipDisplayMode="axis" endPointDisplayName="true" startPointDisplayName="true">
  		<horizontalAxis>
  			<CategoryAxis categoryField="Week"/>
  		</horizontalAxis>
  		<verticalAxis>
  			<LinearAxis/>
  		</verticalAxis>
  		<series>
  			<Bump2DSeries id="bump1" yField="mesjid al-ahzar" displayName="mesjid al-ahzar" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump2" yField="kantin bagendit" displayName="kantin bagendit" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump3" yField="bagendit store" displayName="bagendit store" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump1" yField="taman main anak" displayName="taman main anak" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump2" yField="photo spots" displayName="photo spots" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump3" yField="taman anggrek" displayName="taman anggrek" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump1" yField="sport area" displayName="sport area" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump2" yField="danau eceng" displayName="danau eceng" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump3" yField="jelajah danau" displayName="jelajah danau" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  			<Bump2DSeries id="bump3" yField="wisata alam bagendit" displayName="wisata alam bagendit" itemRenderer="CircleItemRenderer" labelPosition="inside" form="curve">
  				<showDataEffect>

            <SeriesClip duration="1000"/>
  				</showDataEffect>
  			</Bump2DSeries>
  		</series>
  		<annotationElements>
  			<CrossRangeZoomer enableZooming="false" horizontalLabelFormatter="{numFmt}" horizontalStrokeEnable="false"/>
  		</annotationElements>
  	</Bump2DChart>
  </KoolChart>`
  var chartData = []
  let weekData = {}
  let finalData = []


  const weeks = [...new Set(favoritePlace.map(e => e.week))]
  const chartDataGroup = weeks.map(e => ({
    // 'Week': 'Week ' + e,
    'data': []
  }))

  weeks.map((e, n) => {
    for (let i = 0; i < favoritePlace.length; i++) {
      if (e === favoritePlace[i].week) {
        weekData.Week = e
        weekData[favoritePlace[i].nama] = parseInt(favoritePlace[i].sum)
        chartData.push(weekData)
      } else {
        weekData = {}
      }
    }

    for (let i = 0; i < chartData.length; i++) {
      if (e == chartData[i].Week) {
        chartDataGroup[n].data.push(chartData[i])
      }
    }
    let spreadData = [
      ...chartDataGroup[n].data
    ].reduce((prev, cur) => {
      cur.Week = "Week " + cur.Week
      return ({
        ...prev,
        ...cur
      })
    })
    finalData.push(spreadData)
  })

  let visitorsPerDayData = visitorsPerDay.map(e => {
    let getDate = new Date(e.date)
    let date = `${getDate.getMonth()}/${getDate.getDate()}/${getDate.getFullYear()}`
    return [date, parseInt(e.pengunjung)]
  });

  var chart = JSC.chart('chartDiv', {
    debug: false,
    type: 'calendar year solid',
    data: visitorsPerDayData,
    calendar: {
      defaultEdgePoint: {
        tooltip: '',
        mouseTracking: false
      }
    },
    legend_position: 'right',
    palette: {
      colors: ['#5edef7', '#4c5af5', '#6e09ad'],
      colorBar_axis_scale_interval: 5
    },
    defaultPoint_tooltip: '<b>{%date:date D}</b><br> %zValue pengunjung',
    toolbar_visible: false
  });
</script>